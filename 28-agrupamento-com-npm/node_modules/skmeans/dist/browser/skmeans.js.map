{"version":3,"sources":["skmeans.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","module","root","previous_skmeans","skmeans","window","eudist","v1","v2","sqrt","len","sum","d","Math","mandist","abs","dist","Distance","kmrand","data","k","map","ks","multi","floor","random","key","join","push","kmpp","distance","dists","lk","dsum","prs","min","Infinity","j","v","pr","cs","sort","b","rnd","idx","ClusterInit","MAX","init","val","initial","maxit","fndist","old","idxs","conv","it","vlen","count","dif","vsum","vect","h","ksj","sumj","oldj","cj","centroids"],"mappings":"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","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\n(function() {\n  var root = this\n  var previous_skmeans = root.skmeans;\n\tvar skmeans = require('./main.js');\n\n\tif( typeof exports !== 'undefined' ) {\n    if( typeof module !== 'undefined' && module.exports ) {\n      exports = module.exports = skmeans;\n    }\n    exports.skmeans = skmeans;\n  }\n\n\tif(typeof window !== 'undefined') {\n    window.skmeans = skmeans;\n  }\n\n}).call(this);\n\n},{\"./main.js\":4}],2:[function(require,module,exports){\nmodule.exports = {\n\t/**\n\t * Euclidean distance\n\t */\n\teudist(v1,v2,sqrt) {\n\t\tvar len = v1.length;\n\t\tvar sum = 0;\n\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tvar d = (v1[i]||0) - (v2[i]||0);\n\t\t\tsum += d*d;\n\t\t}\n\t\t// Square root not really needed\n\t\treturn sqrt? Math.sqrt(sum) : sum;\n\t},\n\n\tmandist(v1,v2,sqrt) {\n\t\tvar len = v1.length;\n\t\tvar sum = 0;\n\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tsum += Math.abs((v1[i]||0) - (v2[i]||0));\n\t\t}\n\n\t\t// Square root not really needed\n\t\treturn sqrt? Math.sqrt(sum) : sum;\n\t},\n\n\t/**\n\t * Unidimensional distance\n\t */\n\tdist(v1,v2,sqrt) {\n\t\tvar d = Math.abs(v1-v2);\n\t\treturn sqrt? d : d*d;\n\t}\n\n}\n\n},{}],3:[function(require,module,exports){\nconst\n\tDistance = require(\"./distance.js\"),\n\teudist = Distance.eudist,\n\tdist = Distance.dist;\n\nmodule.exports = {\n\tkmrand(data,k) {\n\t\tvar map = {}, ks = [], t = k<<2;\n\t\tvar len = data.length;\n\t\tvar multi = data[0].length>0;\n\n\t\twhile(ks.length<k && (t--)>0) {\n\t\t\tlet d = data[Math.floor(Math.random()*len)];\n\t\t\tlet key = multi? d.join(\"_\") : `${d}`;\n\t\t\tif(!map[key]) {\n\t\t\t\tmap[key] = true;\n\t\t\t\tks.push(d);\n\t\t\t}\n\t\t}\n\n\t\tif(ks.length<k) throw new Error(\"Error initializating clusters\");\n\t\telse return ks;\n\t},\n\n\t/**\n\t * K-means++ initial centroid selection\n\t */\n\tkmpp(data,k) {\n\t\tvar distance = data[0].length? eudist : dist;\n\t\tvar ks = [], len = data.length;\n\t\tvar multi = data[0].length>0;\n\t\tvar map = {};\n\n\t\t// First random centroid\n\t\tvar c = data[Math.floor(Math.random()*len)];\n\t\tvar key = multi? c.join(\"_\") : `${c}`;\n\t\tks.push(c);\n\t\tmap[key] = true;\n\n\t\t// Retrieve next centroids\n\t\twhile(ks.length<k) {\n\t\t\t// Min Distances between current centroids and data points\n\t\t\tlet dists = [], lk = ks.length;\n\t\t\tlet dsum = 0, prs = [];\n\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tlet min = Infinity;\n\t\t\t\tfor(let j=0;j<lk;j++) {\n\t\t\t\t\tlet dist = distance(data[i],ks[j]);\n\t\t\t\t\tif(dist<=min) min = dist;\n\t\t\t\t}\n\t\t\t\tdists[i] = min;\n\t\t\t}\n\n\t\t\t// Sum all min distances\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tdsum += dists[i]\n\t\t\t}\n\n\t\t\t// Probabilities and cummulative prob (cumsum)\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tprs[i] = {i:i, v:data[i],\tpr:dists[i]/dsum, cs:0}\n\t\t\t}\n\n\t\t\t// Sort Probabilities\n\t\t\tprs.sort((a,b)=>a.pr-b.pr);\n\n\t\t\t// Cummulative Probabilities\n\t\t\tprs[0].cs = prs[0].pr;\n\t\t\tfor(let i=1;i<len;i++) {\n\t\t\t\tprs[i].cs = prs[i-1].cs + prs[i].pr;\n\t\t\t}\n\n\t\t\t// Randomize\n\t\t\tlet rnd = Math.random();\n\n\t\t\t// Gets only the items whose cumsum >= rnd\n\t\t\tlet idx = 0;\n\t\t\twhile(idx<len-1 && prs[idx++].cs<rnd);\n\t\t\tks.push(prs[idx-1].v);\n\t\t\t/*\n\t\t\tlet done = false;\n\t\t\twhile(!done) {\n\t\t\t\t// this is our new centroid\n\t\t\t\tc = prs[idx-1].v\n\t\t\t\tkey = multi? c.join(\"_\") : `${c}`;\n\t\t\t\tif(!map[key]) {\n\t\t\t\t\tmap[key] = true;\n\t\t\t\t\tks.push(c);\n\t\t\t\t\tdone = true;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tidx++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t*/\n\t\t}\n\n\t\treturn ks;\n\t}\n\n}\n\n},{\"./distance.js\":2}],4:[function(require,module,exports){\n/*jshint esversion: 6 */\n\nconst\n\tDistance = require(\"./distance.js\"),\n\tClusterInit = require(\"./kinit.js\"),\n\teudist = Distance.eudist,\n\tmandist = Distance.mandist,\n\tdist = Distance.dist,\n\tkmrand = ClusterInit.kmrand,\n\tkmpp = ClusterInit.kmpp;\n\nconst MAX = 10000;\n\n/**\n * Inits an array with values\n */\nfunction init(len,val,v) {\n\tv = v || [];\n\tfor(let i=0;i<len;i++) v[i] = val;\n\treturn v;\n}\n\nfunction skmeans(data,k,initial,maxit,fndist) {\n\tvar ks = [], old = [], idxs = [], dist = [];\n\tvar conv = false, it = maxit || MAX;\n\tvar len = data.length, vlen = data[0].length, multi = vlen>0;\n\tvar count = [];\n\n\tif(!initial) {\n\t\tlet idxs = {};\n\t\twhile(ks.length<k) {\n\t\t\tlet idx = Math.floor(Math.random()*len);\n\t\t\tif(!idxs[idx]) {\n\t\t\t\tidxs[idx] = true;\n\t\t\t\tks.push(data[idx]);\n\t\t\t}\n\t\t}\n\t}\n\telse if(initial==\"kmrand\") {\n\t\tks = kmrand(data,k);\n\t}\n\telse if(initial==\"kmpp\") {\n\t\tks = kmpp(data,k);\n\t}\n\telse {\n\t\tks = initial;\n\t}\n\n\tdo {\n\t\t// Reset k count\n\t\tinit(k,0,count);\n\n\t\t// For each value in data, find the nearest centroid\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tlet min = Infinity, idx = 0;\n\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\t// Custom, Multidimensional or unidimensional\n\t\t\t\tvar dist =\tfndist ? fndist(data[i],ks[j]) :\n\t\t\t\t\t\t\t\t\t\tmulti? eudist(data[i],ks[j]) :\n\t\t\t\t\t\t\t\t\t\tMath.abs(data[i]-ks[j]);\n\n\t\t\t\tif(dist<=min) {\n\t\t\t\t\tmin = dist;\n\t\t\t\t\tidx = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tidxs[i] = idx;\t// Index of the selected centroid for that value\n\t\t\tcount[idx]++;\t\t// Number of values for this centroid\n\t\t}\n\n\t\t// Recalculate centroids\n\t\tvar sum = [], old = [], dif = 0;\n\t\tfor(let j=0;j<k;j++) {\n\t\t\t// Multidimensional or unidimensional\n\t\t\tsum[j] = multi? init(vlen,0,sum[j]) : 0;\n\t\t\told[j] = ks[j];\n\t\t}\n\n\t\t// If multidimensional\n\t\tif(multi) {\n\t\t\tfor(let j=0;j<k;j++) ks[j] = [];\n\n\t\t\t// Sum values and count for each centroid\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tlet\tidx = idxs[i],\t\t// Centroid for that item\n\t\t\t\t\t\tvsum = sum[idx],\t// Sum values for this centroid\n\t\t\t\t\t\tvect = data[i];\t\t// Current vector\n\n\t\t\t\t// Accumulate value on the centroid for current vector\n\t\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\t\tvsum[h] += vect[h];\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Calculate the average for each centroid\n\t\t\tconv = true;\n\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\tlet ksj = ks[j],\t\t// Current centroid\n\t\t\t\t\t\tsumj = sum[j],\t// Accumulated centroid values\n\t\t\t\t\t\toldj = old[j], \t// Old centroid value\n\t\t\t\t\t\tcj = count[j];\t// Number of elements for this centroid\n\n\t\t\t\t// New average\n\t\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\t\tksj[h] = (sumj[h])/(cj) || 0;\t// New centroid\n\t\t\t\t}\n\n\t\t\t\t// Find if centroids have moved\n\t\t\t\tif(conv) {\n\t\t\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\t\t\tif(oldj[h]!=ksj[h]) {\n\t\t\t\t\t\t\tconv = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// If unidimensional\n\t\telse {\n\t\t\t// Sum values and count for each centroid\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tlet idx = idxs[i];\n\t\t\t\tsum[idx] += data[i];\n\t\t\t}\n\t\t\t// Calculate the average for each centroid\n\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\tks[j] = sum[j]/count[j] || 0;\t// New centroid\n\t\t\t}\n\t\t\t// Find if centroids have moved\n\t\t\tconv = true;\n\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\tif(old[j]!=ks[j]) {\n\t\t\t\t\tconv = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconv = conv || (--it<=0);\n\t}while(!conv);\n\n\treturn {\n\t\tit : MAX-it,\n\t\tk : k,\n\t\tidxs : idxs,\n\t\tcentroids : ks\n\t};\n}\n\nmodule.exports = skmeans;\n\n},{\"./distance.js\":2,\"./kinit.js\":3}]},{},[1]);\n"],"file":"skmeans.js"}