{"version":3,"sources":["../../main.js"],"names":["Distance","require","ClusterInit","eudist","mandist","dist","kmrand","kmpp","MAX","init","len","val","v","i","skmeans","data","k","initial","maxit","fndist","ks","old","idxs","conv","it","length","vlen","multi","count","idx","Math","floor","random","push","min","Infinity","j","abs","sum","dif","vsum","vect","h","ksj","sumj","oldj","cj","centroids","module","exports"],"mappings":";;AAAA;AAEA,IACCA,QAAQ,GAAGC,OAAO,CAAC,eAAD,CADnB;AAAA,IAECC,WAAW,GAAGD,OAAO,CAAC,YAAD,CAFtB;AAAA,IAGCE,MAAM,GAAGH,QAAQ,CAACG,MAHnB;AAAA,IAICC,OAAO,GAAGJ,QAAQ,CAACI,OAJpB;AAAA,IAKCC,IAAI,GAAGL,QAAQ,CAACK,IALjB;AAAA,IAMCC,MAAM,GAAGJ,WAAW,CAACI,MANtB;AAAA,IAOCC,IAAI,GAAGL,WAAW,CAACK,IAPpB;;AASA,IAAMC,GAAG,GAAG,KAAZ;AAEA;;;;AAGA,SAASC,IAAT,CAAcC,GAAd,EAAkBC,GAAlB,EAAsBC,CAAtB,EAAyB;AACxBA,EAAAA,CAAC,GAAGA,CAAC,IAAI,EAAT;;AACA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACH,GAAd,EAAkBG,CAAC,EAAnB;AAAuBD,IAAAA,CAAC,CAACC,CAAD,CAAD,GAAOF,GAAP;AAAvB;;AACA,SAAOC,CAAP;AACA;;AAED,SAASE,OAAT,CAAiBC,IAAjB,EAAsBC,CAAtB,EAAwBC,OAAxB,EAAgCC,KAAhC,EAAsCC,MAAtC,EAA8C;AAC7C,MAAIC,EAAE,GAAG,EAAT;AAAA,MAAaC,GAAG,GAAG,EAAnB;AAAA,MAAuBC,IAAI,GAAG,EAA9B;AAAA,MAAkCjB,IAAI,GAAG,EAAzC;AACA,MAAIkB,IAAI,GAAG,KAAX;AAAA,MAAkBC,EAAE,GAAGN,KAAK,IAAIV,GAAhC;AACA,MAAIE,GAAG,GAAGK,IAAI,CAACU,MAAf;AAAA,MAAuBC,IAAI,GAAGX,IAAI,CAAC,CAAD,CAAJ,CAAQU,MAAtC;AAAA,MAA8CE,KAAK,GAAGD,IAAI,GAAC,CAA3D;AACA,MAAIE,KAAK,GAAG,EAAZ;;AAEA,MAAG,CAACX,OAAJ,EAAa;AACZ,QAAIK,KAAI,GAAG,EAAX;;AACA,WAAMF,EAAE,CAACK,MAAH,GAAUT,CAAhB,EAAmB;AAClB,UAAIa,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAActB,GAAzB,CAAV;;AACA,UAAG,CAACY,KAAI,CAACO,GAAD,CAAR,EAAe;AACdP,QAAAA,KAAI,CAACO,GAAD,CAAJ,GAAY,IAAZ;AACAT,QAAAA,EAAE,CAACa,IAAH,CAAQlB,IAAI,CAACc,GAAD,CAAZ;AACA;AACD;AACD,GATD,MAUK,IAAGZ,OAAO,IAAE,QAAZ,EAAsB;AAC1BG,IAAAA,EAAE,GAAGd,MAAM,CAACS,IAAD,EAAMC,CAAN,CAAX;AACA,GAFI,MAGA,IAAGC,OAAO,IAAE,MAAZ,EAAoB;AACxBG,IAAAA,EAAE,GAAGb,IAAI,CAACQ,IAAD,EAAMC,CAAN,CAAT;AACA,GAFI,MAGA;AACJI,IAAAA,EAAE,GAAGH,OAAL;AACA;;AAED,KAAG;AACF;AACAR,IAAAA,IAAI,CAACO,CAAD,EAAG,CAAH,EAAKY,KAAL,CAAJ,CAFE,CAIF;;AACA,SAAI,IAAIf,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACH,GAAd,EAAkBG,CAAC,EAAnB,EAAuB;AACtB,UAAIqB,GAAG,GAAGC,QAAV;AAAA,UAAoBN,IAAG,GAAG,CAA1B;;AACA,WAAI,IAAIO,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACpB,CAAd,EAAgBoB,CAAC,EAAjB,EAAqB;AACpB;AACA,YAAI/B,IAAI,GAAGc,MAAM,GAAGA,MAAM,CAACJ,IAAI,CAACF,CAAD,CAAL,EAASO,EAAE,CAACgB,CAAD,CAAX,CAAT,GACXT,KAAK,GAAExB,MAAM,CAACY,IAAI,CAACF,CAAD,CAAL,EAASO,EAAE,CAACgB,CAAD,CAAX,CAAR,GACLN,IAAI,CAACO,GAAL,CAAStB,IAAI,CAACF,CAAD,CAAJ,GAAQO,EAAE,CAACgB,CAAD,CAAnB,CAFN;;AAIA,YAAG/B,IAAI,IAAE6B,GAAT,EAAc;AACbA,UAAAA,GAAG,GAAG7B,IAAN;AACAwB,UAAAA,IAAG,GAAGO,CAAN;AACA;AACD;;AACDd,MAAAA,IAAI,CAACT,CAAD,CAAJ,GAAUgB,IAAV,CAbsB,CAaP;;AACfD,MAAAA,KAAK,CAACC,IAAD,CAAL,GAdsB,CAcP;AACf,KApBC,CAsBF;;;AACA,QAAIS,GAAG,GAAG,EAAV;AAAA,QAAcjB,GAAG,GAAG,EAApB;AAAA,QAAwBkB,GAAG,GAAG,CAA9B;;AACA,SAAI,IAAIH,EAAC,GAAC,CAAV,EAAYA,EAAC,GAACpB,CAAd,EAAgBoB,EAAC,EAAjB,EAAqB;AACpB;AACAE,MAAAA,GAAG,CAACF,EAAD,CAAH,GAAST,KAAK,GAAElB,IAAI,CAACiB,IAAD,EAAM,CAAN,EAAQY,GAAG,CAACF,EAAD,CAAX,CAAN,GAAwB,CAAtC;AACAf,MAAAA,GAAG,CAACe,EAAD,CAAH,GAAShB,EAAE,CAACgB,EAAD,CAAX;AACA,KA5BC,CA8BF;;;AACA,QAAGT,KAAH,EAAU;AACT,WAAI,IAAIS,GAAC,GAAC,CAAV,EAAYA,GAAC,GAACpB,CAAd,EAAgBoB,GAAC,EAAjB;AAAqBhB,QAAAA,EAAE,CAACgB,GAAD,CAAF,GAAQ,EAAR;AAArB,OADS,CAGT;;;AACA,WAAI,IAAIvB,EAAC,GAAC,CAAV,EAAYA,EAAC,GAACH,GAAd,EAAkBG,EAAC,EAAnB,EAAuB;AACtB,YAAIgB,KAAG,GAAGP,IAAI,CAACT,EAAD,CAAd;AAAA,YAAoB;AAClB2B,QAAAA,IAAI,GAAGF,GAAG,CAACT,KAAD,CADZ;AAAA,YACmB;AACjBY,QAAAA,IAAI,GAAG1B,IAAI,CAACF,EAAD,CAFb,CADsB,CAGH;AAEnB;;AACA,aAAI,IAAI6B,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAChB,IAAd,EAAmBgB,CAAC,EAApB,EAAwB;AACvBF,UAAAA,IAAI,CAACE,CAAD,CAAJ,IAAWD,IAAI,CAACC,CAAD,CAAf;AACA;AACD,OAbQ,CAcT;;;AACAnB,MAAAA,IAAI,GAAG,IAAP;;AACA,WAAI,IAAIa,GAAC,GAAC,CAAV,EAAYA,GAAC,GAACpB,CAAd,EAAgBoB,GAAC,EAAjB,EAAqB;AACpB,YAAIO,GAAG,GAAGvB,EAAE,CAACgB,GAAD,CAAZ;AAAA,YAAkB;AAChBQ,QAAAA,IAAI,GAAGN,GAAG,CAACF,GAAD,CADZ;AAAA,YACiB;AACfS,QAAAA,IAAI,GAAGxB,GAAG,CAACe,GAAD,CAFZ;AAAA,YAEkB;AAChBU,QAAAA,EAAE,GAAGlB,KAAK,CAACQ,GAAD,CAHZ,CADoB,CAIH;AAEjB;;AACA,aAAI,IAAIM,EAAC,GAAC,CAAV,EAAYA,EAAC,GAAChB,IAAd,EAAmBgB,EAAC,EAApB,EAAwB;AACvBC,UAAAA,GAAG,CAACD,EAAD,CAAH,GAAUE,IAAI,CAACF,EAAD,CAAL,GAAWI,EAAX,IAAkB,CAA3B,CADuB,CACO;AAC9B,SATmB,CAWpB;;;AACA,YAAGvB,IAAH,EAAS;AACR,eAAI,IAAImB,GAAC,GAAC,CAAV,EAAYA,GAAC,GAAChB,IAAd,EAAmBgB,GAAC,EAApB,EAAwB;AACvB,gBAAGG,IAAI,CAACH,GAAD,CAAJ,IAASC,GAAG,CAACD,GAAD,CAAf,EAAoB;AACnBnB,cAAAA,IAAI,GAAG,KAAP;AACA;AACA;AACD;AACD;AACD;AACD,KArCD,CAsCA;AAtCA,SAuCK;AACJ;AACA,aAAI,IAAIV,GAAC,GAAC,CAAV,EAAYA,GAAC,GAACH,GAAd,EAAkBG,GAAC,EAAnB,EAAuB;AACtB,cAAIgB,KAAG,GAAGP,IAAI,CAACT,GAAD,CAAd;AACAyB,UAAAA,GAAG,CAACT,KAAD,CAAH,IAAYd,IAAI,CAACF,GAAD,CAAhB;AACA,SALG,CAMJ;;;AACA,aAAI,IAAIuB,GAAC,GAAC,CAAV,EAAYA,GAAC,GAACpB,CAAd,EAAgBoB,GAAC,EAAjB,EAAqB;AACpBhB,UAAAA,EAAE,CAACgB,GAAD,CAAF,GAAQE,GAAG,CAACF,GAAD,CAAH,GAAOR,KAAK,CAACQ,GAAD,CAAZ,IAAmB,CAA3B,CADoB,CACU;AAC9B,SATG,CAUJ;;;AACAb,QAAAA,IAAI,GAAG,IAAP;;AACA,aAAI,IAAIa,GAAC,GAAC,CAAV,EAAYA,GAAC,GAACpB,CAAd,EAAgBoB,GAAC,EAAjB,EAAqB;AACpB,cAAGf,GAAG,CAACe,GAAD,CAAH,IAAQhB,EAAE,CAACgB,GAAD,CAAb,EAAkB;AACjBb,YAAAA,IAAI,GAAG,KAAP;AACA;AACA;AACD;AACD;;AAEDA,IAAAA,IAAI,GAAGA,IAAI,IAAK,EAAEC,EAAF,IAAM,CAAtB;AACA,GA3FD,QA2FO,CAACD,IA3FR;;AA6FA,SAAO;AACNC,IAAAA,EAAE,EAAGhB,GAAG,GAACgB,EADH;AAENR,IAAAA,CAAC,EAAGA,CAFE;AAGNM,IAAAA,IAAI,EAAGA,IAHD;AAINyB,IAAAA,SAAS,EAAG3B;AAJN,GAAP;AAMA;;AAED4B,MAAM,CAACC,OAAP,GAAiBnC,OAAjB","sourcesContent":["/*jshint esversion: 6 */\n\nconst\n\tDistance = require(\"./distance.js\"),\n\tClusterInit = require(\"./kinit.js\"),\n\teudist = Distance.eudist,\n\tmandist = Distance.mandist,\n\tdist = Distance.dist,\n\tkmrand = ClusterInit.kmrand,\n\tkmpp = ClusterInit.kmpp;\n\nconst MAX = 10000;\n\n/**\n * Inits an array with values\n */\nfunction init(len,val,v) {\n\tv = v || [];\n\tfor(let i=0;i<len;i++) v[i] = val;\n\treturn v;\n}\n\nfunction skmeans(data,k,initial,maxit,fndist) {\n\tvar ks = [], old = [], idxs = [], dist = [];\n\tvar conv = false, it = maxit || MAX;\n\tvar len = data.length, vlen = data[0].length, multi = vlen>0;\n\tvar count = [];\n\n\tif(!initial) {\n\t\tlet idxs = {};\n\t\twhile(ks.length<k) {\n\t\t\tlet idx = Math.floor(Math.random()*len);\n\t\t\tif(!idxs[idx]) {\n\t\t\t\tidxs[idx] = true;\n\t\t\t\tks.push(data[idx]);\n\t\t\t}\n\t\t}\n\t}\n\telse if(initial==\"kmrand\") {\n\t\tks = kmrand(data,k);\n\t}\n\telse if(initial==\"kmpp\") {\n\t\tks = kmpp(data,k);\n\t}\n\telse {\n\t\tks = initial;\n\t}\n\n\tdo {\n\t\t// Reset k count\n\t\tinit(k,0,count);\n\n\t\t// For each value in data, find the nearest centroid\n\t\tfor(let i=0;i<len;i++) {\n\t\t\tlet min = Infinity, idx = 0;\n\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\t// Custom, Multidimensional or unidimensional\n\t\t\t\tvar dist =\tfndist ? fndist(data[i],ks[j]) :\n\t\t\t\t\t\t\t\t\t\tmulti? eudist(data[i],ks[j]) :\n\t\t\t\t\t\t\t\t\t\tMath.abs(data[i]-ks[j]);\n\n\t\t\t\tif(dist<=min) {\n\t\t\t\t\tmin = dist;\n\t\t\t\t\tidx = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tidxs[i] = idx;\t// Index of the selected centroid for that value\n\t\t\tcount[idx]++;\t\t// Number of values for this centroid\n\t\t}\n\n\t\t// Recalculate centroids\n\t\tvar sum = [], old = [], dif = 0;\n\t\tfor(let j=0;j<k;j++) {\n\t\t\t// Multidimensional or unidimensional\n\t\t\tsum[j] = multi? init(vlen,0,sum[j]) : 0;\n\t\t\told[j] = ks[j];\n\t\t}\n\n\t\t// If multidimensional\n\t\tif(multi) {\n\t\t\tfor(let j=0;j<k;j++) ks[j] = [];\n\n\t\t\t// Sum values and count for each centroid\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tlet\tidx = idxs[i],\t\t// Centroid for that item\n\t\t\t\t\t\tvsum = sum[idx],\t// Sum values for this centroid\n\t\t\t\t\t\tvect = data[i];\t\t// Current vector\n\n\t\t\t\t// Accumulate value on the centroid for current vector\n\t\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\t\tvsum[h] += vect[h];\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Calculate the average for each centroid\n\t\t\tconv = true;\n\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\tlet ksj = ks[j],\t\t// Current centroid\n\t\t\t\t\t\tsumj = sum[j],\t// Accumulated centroid values\n\t\t\t\t\t\toldj = old[j], \t// Old centroid value\n\t\t\t\t\t\tcj = count[j];\t// Number of elements for this centroid\n\n\t\t\t\t// New average\n\t\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\t\tksj[h] = (sumj[h])/(cj) || 0;\t// New centroid\n\t\t\t\t}\n\n\t\t\t\t// Find if centroids have moved\n\t\t\t\tif(conv) {\n\t\t\t\t\tfor(let h=0;h<vlen;h++) {\n\t\t\t\t\t\tif(oldj[h]!=ksj[h]) {\n\t\t\t\t\t\t\tconv = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// If unidimensional\n\t\telse {\n\t\t\t// Sum values and count for each centroid\n\t\t\tfor(let i=0;i<len;i++) {\n\t\t\t\tlet idx = idxs[i];\n\t\t\t\tsum[idx] += data[i];\n\t\t\t}\n\t\t\t// Calculate the average for each centroid\n\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\tks[j] = sum[j]/count[j] || 0;\t// New centroid\n\t\t\t}\n\t\t\t// Find if centroids have moved\n\t\t\tconv = true;\n\t\t\tfor(let j=0;j<k;j++) {\n\t\t\t\tif(old[j]!=ks[j]) {\n\t\t\t\t\tconv = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconv = conv || (--it<=0);\n\t}while(!conv);\n\n\treturn {\n\t\tit : MAX-it,\n\t\tk : k,\n\t\tidxs : idxs,\n\t\tcentroids : ks\n\t};\n}\n\nmodule.exports = skmeans;\n"],"file":"main.js"}